(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-459b2ba6"],{"00d7":function(n,A,e){},"0cb8":function(n,A,e){"use strict";e("32ad")},"129f":function(n,A){n.exports=Object.is||function(n,A){return n===A?0!==n||1/n===1/A:n!=n&&A!=A}},"1a7c":function(n,A,e){"use strict";var t=function(){var n=this,A=n.$createElement,e=n._self._c||A;return e("div",{staticClass:"navigation"},[e("button",{class:["button","round","mr-5",{active:n.activeBack}],on:{click:function(A){return n.$emit("navigate","back")}}},[n.isWin10?e("i",{staticClass:"las la-arrow-left"}):e("i",{staticClass:"fa fa-arrow-left"})]),e("button",{class:["button","round",{active:n.activeNext}],on:{click:function(A){return n.$emit("navigate","next")}}},[n.isWin10?e("i",{staticClass:"las la-arrow-right"}):e("i",{staticClass:"fa fa-arrow-right"})])])},i=[],s=e("5530"),a=e("2f62"),o={props:{activeBack:Boolean,activeNext:Boolean},computed:Object(s["a"])(Object(s["a"])({},Object(a["b"])(["theme"])),{},{isWin10:function(){return"win10"===this.theme}})},r=o,h=(e("76bf"),e("2877")),c=Object(h["a"])(r,t,i,!1,null,"7562fab5",null);A["a"]=c.exports},"32ad":function(n,A,e){},5638:function(n,A,e){"use strict";e("971f")},"76bf":function(n,A,e){"use strict";e("846d")},"841c":function(n,A,e){"use strict";var t=e("d784"),i=e("825a"),s=e("1d80"),a=e("129f"),o=e("14c3");t("search",1,(function(n,A,e){return[function(A){var e=s(this),t=void 0==A?void 0:A[n];return void 0!==t?t.call(A,e):new RegExp(A)[n](String(e))},function(n){var t=e(A,n,this);if(t.done)return t.value;var s=i(n),r=String(this),h=s.lastIndex;a(h,0)||(s.lastIndex=0);var c=o(s,r);return a(s.lastIndex,h)||(s.lastIndex=h),null===c?-1:c.index}]}))},"846d":function(n,A,e){},"962a":function(n,A,e){"use strict";var t=function(){var n=this,A=n.$createElement,e=n._self._c||A;return e("div",{staticClass:"addrbar"},[n._t("default"),n.icon&&n.location?e("div",{staticClass:"addr",style:{backgroundImage:"url("+n.icon+")"}},["string"===typeof n.location?e("label",[n._v(n._s(n.location))]):n._l(n.location,(function(A,t){return e("label",{key:t},[n._v(n._s(A))])}))],2):n._e(),n.hasSearch||n.search?e("div",{staticClass:"input"},[e("input",{attrs:{type:"search",placeholder:n.$t("search")+" "+n.currentLocation},on:{input:n.handleSearch}})]):n._e()],2)},i=[],s=(e("fb6a"),e("ac1f"),e("841c"),{props:{icon:{type:String,default:null},location:{type:[String,Array],default:null},search:Function,hasSearch:Boolean},computed:{currentLocation:function(){var n=this.location.slice(0);return"string"===typeof n?n:n.pop()}},methods:{handleSearch:function(n){this.search&&this.search(n)}}}),a=s,o=(e("f76a"),e("2877")),r=Object(o["a"])(a,t,i,!1,null,"1d256d67",null);A["a"]=r.exports},"971f":function(n,A,e){},f76a:function(n,A,e){"use strict";e("00d7")},f824:function(n,A,e){"use strict";e.r(A);var t=function(){var n=this,A=n.$createElement,e=n._self._c||A;return e("window",{attrs:{id:"window-chrome"}},[e("title-bar",[e("controls")],1),e("div",{ref:"tabs",attrs:{id:"chrome-tabs"}},n._l(n.tabs,(function(A,t){return e("chrome-tab",{key:t,attrs:{index:t,tabData:A},on:{update:n.updateTab}})})),1)],1)},i=[],s=e("5530"),a=(e("4de4"),e("159b"),e("caad"),e("ac1f"),e("1276"),e("a434"),e("fb6a"),e("6792")),o=e("e302"),r=e("0f35"),h=e("e716"),c=e("3af2"),d=e("6210"),l=e("10dc"),u=function(){var n=this,A=n.$createElement,e=n._self._c||A;return e("section",{staticClass:"section",attrs:{id:n.id,default:n.tab.isActive,hidden:!n.tab.isOpen}},[e("div",{staticClass:"title"},[n.tab.isLoading?e("ring-spinner"):n._e(),!n.tab.isLoading&&n.tab.title?e("i",{staticClass:"fa fa-globe"}):n._e(),n._v(" "+n._s(n.tab.title||n.$t("new-tab"))+" ")],1),e("address-bar",[e("navigation",{attrs:{activeBack:n.tab.activeBack,activeNext:n.tab.activeNext},on:{navigate:n.navigate}}),e("button",{staticClass:"button active",on:{click:n.reload}},[e("i",{staticClass:"fa fa-rotate-right"})]),e("button",{staticClass:"button active",on:{click:n.loadHome}},[e("i",{staticClass:"fa fa-home"})]),e("div",{staticClass:"input"},[e("input",{ref:"Address",domProps:{value:n.tab.url},on:{focus:n.focusAddress,keyup:function(A){return!A.type.indexOf("key")&&n._k(A.keyCode,"enter",13,A.key,"Enter")?null:n.load(A)}}})]),e("button",{staticClass:"button"},[e("i",{staticClass:"fa fa-reorder"})])],1),e("div",{staticClass:"container"},[n.tab.error?e("div",{staticClass:"frame",domProps:{innerHTML:n._s("<iframe frameborder=0 srcdoc='"+n.ErrorPage+"' />")}}):n.tab.url?e("div",{staticClass:"frame",domProps:{innerHTML:n._s("<iframe is='x-frame' frameborder=0 src='"+n.tab.url+"' data-index="+n.index+" />")}}):e("div",{staticClass:"blank"},[e("img",{attrs:{src:n.logo}}),e("div",{staticClass:"search"},[e("input",{attrs:{type:"search",placeholder:n.$t("google")},on:{keyup:function(A){return!A.type.indexOf("key")&&n._k(A.keyCode,"enter",13,A.key,"Enter")?null:n.load(A)}}}),e("button",[e("img",{attrs:{src:n.mic}})])])])])],1)},m=[],g=(e("a9e3"),e("5319"),e("d3b7"),e("3ca3"),e("ddb0"),e("2b3d"),function(){var n=this,A=n.$createElement;n._self._c;return n._m(0)}),p=[function(){var n=this,A=n.$createElement,e=n._self._c||A;return e("div",{staticClass:"lds-ring"},[e("div"),e("div"),e("div"),e("div")])}],f=(e("5638"),e("2877")),C={},I=Object(f["a"])(C,g,p,!1,null,"0e4e029e",null),E=I.exports,x=e("962a"),T=e("1a7c"),S=(e("99af"),e("d77d")),v=e.n(S),b=e("f868"),R=e.n(b),B=e("5b62"),D=e.n(B),M=e("0535"),Q=e.n(M),V='\n\x3c!--\nCopyright (c) 2014 The Chromium Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that\ncan be found in the LICENSE file.\n--\x3e\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no">\n    <style>\n        html,\n        body {\n            padding: 0;\n            margin: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        .icon {\n            -webkit-user-select: none;\n            user-select: none;\n            display: inline-block;\n        }\n\n        .icon-offline {\n            content: -webkit-image-set(url('.concat(v.a,") 1x, url(").concat(R.a,') 2x);\n            position: relative;\n        }\n\n        .hidden {\n            display: none;\n        }\n\n\n        /* Offline page */\n\n        .offline .interstitial-wrapper {\n            color: #2b2b2b;\n            font-family: "Segoe UI", sans-serif;\n            font-size: 1em;\n            line-height: 1.55;\n            margin: 0 auto;\n            max-width: 600px;\n            padding-top: 100px;\n            width: 100%;\n        }\n\n        h1 {\n            margin: 0;\n            font-size: 1.5em;\n            font-weight: 400;\n        }\n\n        p, ul {\n            margin: 0.4em 0;\n            color: #333;\n        }\n\n        .text-muted {\n            color: #aaa;\n        }\n      \n        .offline .runner-container {\n            width: 44px;\n            height: 150px;\n            max-width: 600px;\n            overflow: hidden;\n            position: absolute;\n            top: 35px;\n        }\n\n        .offline .runner-canvas {\n            height: 150px;\n            max-width: 600px;\n            opacity: 1;\n            overflow: hidden;\n            position: absolute;\n            top: 0;\n            z-index: 2;\n        }\n\n        .offline .controller {\n            background: rgba(247, 247, 247, .1);\n            height: 100vh;\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: 100vw;\n            z-index: 1;\n        }\n\n        #offline-resources {\n            display: none;\n        }\n\n        @media (max-width: 420px) {\n\n            .suggested-left>#control-buttons,\n            .suggested-right>#control-buttons {\n                float: none;\n            }\n\n            .snackbar {\n                left: 0;\n                bottom: 0;\n                width: 100%;\n                border-radius: 0;\n            }\n        }\n\n        @media (max-height: 350px) {\n            h1 {\n                margin: 0 0 15px;\n            }\n\n            .icon-offline {\n                margin: 0 0 10px;\n            }\n\n            .interstitial-wrapper {\n                margin-top: 5%;\n            }\n\n            .nav-wrapper {\n                margin-top: 30px;\n            }\n        }\n\n        @media (min-width: 600px) and (max-width: 736px) and (orientation: landscape) {\n            .offline .interstitial-wrapper {\n                margin-left: 0;\n                margin-right: 0;\n            }\n        }\n\n        @media (min-width: 420px) and (max-width: 736px) and (min-height: 240px) and (max-height: 420px) and (orientation:landscape) {\n            .interstitial-wrapper {\n                margin-bottom: 100px;\n            }\n        }\n\n        @media (min-height: 240px) and (orientation: landscape) {\n            .offline .interstitial-wrapper {\n                margin-bottom: 90px;\n            }\n\n            .icon-offline {\n                margin-bottom: 15px;\n            }\n        }\n\n        @media (max-height: 320px) and (orientation: landscape) {\n            .icon-offline {\n                margin-bottom: 0;\n            }\n\n            .offline .runner-container {\n                top: 10px;\n            }\n        }\n\n        @media (max-width: 240px) {\n            .interstitial-wrapper {\n                overflow: inherit;\n                padding: 0 8px;\n            }\n        }\n    </style>\n    <script>\n        (function () {\n            "use strict";\n            /**\n             * T-Rex runner.\n             * @param {string} outerContainerId Outer containing element id.\n             * @param {Object} opt_config\n             * @constructor\n             * @export\n             */\n            function Runner(outerContainerId, opt_config) {\n                // Singleton\n                if (Runner.instance_) {\n                    return Runner.instance_;\n                }\n                Runner.instance_ = this;\n\n                this.outerContainerEl = document.querySelector(outerContainerId);\n                this.containerEl = null;\n                this.snackbarEl = null;\n                this.detailsButton = this.outerContainerEl.querySelector("#details-button");\n\n                this.config = opt_config || Runner.config;\n\n                this.dimensions = Runner.defaultDimensions;\n\n                this.canvas = null;\n                this.canvasCtx = null;\n\n                this.tRex = null;\n\n                this.distanceMeter = null;\n                this.distanceRan = 0;\n\n                this.highestScore = 0;\n\n                this.time = 0;\n                this.runningTime = 0;\n                this.msPerFrame = 1000 / FPS;\n                this.currentSpeed = this.config.SPEED;\n\n                this.obstacles = [];\n\n                this.activated = false; // Whether the easter egg has been activated.\n                this.playing = false; // Whether the game is currently in play state.\n                this.crashed = false;\n                this.paused = false;\n                this.inverted = false;\n                this.invertTimer = 0;\n                this.resizeTimerId_ = null;\n\n                this.playCount = 0;\n\n                // Sound FX.\n                this.audioBuffer = null;\n                this.soundFx = {};\n\n                // Global web audio context for playing sounds.\n                this.audioContext = null;\n\n                // Images.\n                this.images = {};\n                this.imagesLoaded = 0;\n\n                if (this.isDisabled()) {\n                    this.setupDisabledRunner();\n                } else {\n                    this.loadImages();\n                }\n            }\n            window["Runner"] = Runner;\n\n\n            /**\n             * Default game width.\n             * @const\n             */\n            var DEFAULT_WIDTH = 600;\n\n            /**\n             * Frames per second.\n             * @const\n             */\n            var FPS = 60;\n\n            /** @const */\n            var IS_HIDPI = window.devicePixelRatio > 1;\n\n            /** @const */\n            var IS_IOS = /iPad|iPhone|iPod/.test(window.navigator.platform);\n\n            /** @const */\n            var IS_MOBILE = /Android/.test(window.navigator.userAgent) || IS_IOS;\n\n            /** @const */\n            var IS_TOUCH_ENABLED = "ontouchstart" in window;\n\n            /**\n             * Default game configuration.\n             * @enum {number}\n             */\n            Runner.config = {\n                ACCELERATION: 0.001,\n                BG_CLOUD_SPEED: 0.2,\n                BOTTOM_PAD: 10,\n                CLEAR_TIME: 3000,\n                CLOUD_FREQUENCY: 0.5,\n                GAMEOVER_CLEAR_TIME: 750,\n                GAP_COEFFICIENT: 0.6,\n                GRAVITY: 0.6,\n                INITIAL_JUMP_VELOCITY: 12,\n                INVERT_FADE_DURATION: 12000,\n                INVERT_DISTANCE: 700,\n                MAX_BLINK_COUNT: 3,\n                MAX_CLOUDS: 6,\n                MAX_OBSTACLE_LENGTH: 3,\n                MAX_OBSTACLE_DUPLICATION: 2,\n                MAX_SPEED: 13,\n                MIN_JUMP_HEIGHT: 35,\n                MOBILE_SPEED_COEFFICIENT: 1.2,\n                RESOURCE_TEMPLATE_ID: "audio-resources",\n                SPEED: 6,\n                SPEED_DROP_COEFFICIENT: 3\n            };\n\n\n            /**\n             * Default dimensions.\n             * @enum {string}\n             */\n            Runner.defaultDimensions = {\n                WIDTH: DEFAULT_WIDTH,\n                HEIGHT: 150\n            };\n\n\n            /**\n             * CSS class names.\n             * @enum {string}\n             */\n            Runner.classes = {\n                CANVAS: "runner-canvas",\n                CONTAINER: "runner-container",\n                CRASHED: "crashed",\n                ICON: "icon-offline",\n                INVERTED: "inverted",\n                SNACKBAR: "snackbar",\n                SNACKBAR_SHOW: "snackbar-show",\n                TOUCH_CONTROLLER: "controller"\n            };\n\n\n            /**\n             * Sprite definition layout of the spritesheet.\n             * @enum {Object}\n             */\n            Runner.spriteDefinition = {\n                LDPI: {\n                    CACTUS_LARGE: { x: 332, y: 2 },\n                    CACTUS_SMALL: { x: 228, y: 2 },\n                    CLOUD: { x: 86, y: 2 },\n                    HORIZON: { x: 2, y: 54 },\n                    MOON: { x: 484, y: 2 },\n                    PTERODACTYL: { x: 134, y: 2 },\n                    RESTART: { x: 2, y: 2 },\n                    TEXT_SPRITE: { x: 655, y: 2 },\n                    TREX: { x: 848, y: 2 },\n                    STAR: { x: 645, y: 2 }\n                },\n                HDPI: {\n                    CACTUS_LARGE: { x: 652, y: 2 },\n                    CACTUS_SMALL: { x: 446, y: 2 },\n                    CLOUD: { x: 166, y: 2 },\n                    HORIZON: { x: 2, y: 104 },\n                    MOON: { x: 954, y: 2 },\n                    PTERODACTYL: { x: 260, y: 2 },\n                    RESTART: { x: 2, y: 2 },\n                    TEXT_SPRITE: { x: 1294, y: 2 },\n                    TREX: { x: 1678, y: 2 },\n                    STAR: { x: 1276, y: 2 }\n                }\n            };\n\n\n            /**\n             * Sound FX. Reference to the ID of the audio tag on interstitial page.\n             * @enum {string}\n             */\n            Runner.sounds = {\n                BUTTON_PRESS: "offline-sound-press",\n                HIT: "offline-sound-hit",\n                SCORE: "offline-sound-reached"\n            };\n\n\n            /**\n             * Key code mapping.\n             * @enum {Object}\n             */\n            Runner.keycodes = {\n                JUMP: { "38": 1, "32": 1 },  // Up, spacebar\n                DUCK: { "40": 1 },  // Down\n                RESTART: { "13": 1 }  // Enter\n            };\n\n\n            /**\n             * Runner event names.\n             * @enum {string}\n             */\n            Runner.events = {\n                ANIM_END: "webkitAnimationEnd",\n                CLICK: "click",\n                KEYDOWN: "keydown",\n                KEYUP: "keyup",\n                MOUSEDOWN: "mousedown",\n                MOUSEUP: "mouseup",\n                RESIZE: "resize",\n                TOUCHEND: "touchend",\n                TOUCHSTART: "touchstart",\n                VISIBILITY: "visibilitychange",\n                BLUR: "blur",\n                FOCUS: "focus",\n                LOAD: "load"\n            };\n\n\n            Runner.prototype = {\n                /**\n                 * Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\n                 * @return {boolean}\n                 */\n                isDisabled: function () {\n                    // return loadTimeData && loadTimeData.valueExists("disabledEasterEgg");\n                    return false;\n                },\n\n                /**\n                 * For disabled instances, set up a snackbar with the disabled message.\n                 */\n                setupDisabledRunner: function () {\n                    this.containerEl = document.createElement("div");\n                    this.containerEl.className = Runner.classes.SNACKBAR;\n                    this.containerEl.textContent = loadTimeData.getValue("disabledEasterEgg");\n                    this.outerContainerEl.appendChild(this.containerEl);\n\n                    // Show notification when the activation key is pressed.\n                    document.addEventListener(Runner.events.KEYDOWN, function (e) {\n                        if (Runner.keycodes.JUMP[e.keyCode]) {\n                            this.containerEl.classList.add(Runner.classes.SNACKBAR_SHOW);\n                            document.querySelector(".icon").classList.add("icon-disabled");\n                        }\n                    }.bind(this));\n                },\n\n                /**\n                 * Setting individual settings for debugging.\n                 * @param {string} setting\n                 * @param {*} value\n                 */\n                updateConfigSetting: function (setting, value) {\n                    if (setting in this.config && value != undefined) {\n                        this.config[setting] = value;\n\n                        switch (setting) {\n                            case "GRAVITY":\n                            case "MIN_JUMP_HEIGHT":\n                            case "SPEED_DROP_COEFFICIENT":\n                                this.tRex.config[setting] = value;\n                                break;\n                            case "INITIAL_JUMP_VELOCITY":\n                                this.tRex.setJumpVelocity(value);\n                                break;\n                            case "SPEED":\n                                this.setSpeed(value);\n                                break;\n                        }\n                    }\n                },\n\n                /**\n                 * Cache the appropriate image sprite from the page and get the sprite sheet\n                 * definition.\n                 */\n                loadImages: function () {\n                    if (IS_HIDPI) {\n                        Runner.imageSprite = document.getElementById("offline-resources-2x");\n                        this.spriteDef = Runner.spriteDefinition.HDPI;\n                    } else {\n                        Runner.imageSprite = document.getElementById("offline-resources-1x");\n                        this.spriteDef = Runner.spriteDefinition.LDPI;\n                    }\n\n                    if (Runner.imageSprite.complete) {\n                        this.init();\n                    } else {\n                        // If the images are not yet loaded, add a listener.\n                        Runner.imageSprite.addEventListener(Runner.events.LOAD,\n                            this.init.bind(this));\n                    }\n                },\n\n                /**\n                 * Load and decode base 64 encoded sounds.\n                 */\n                loadSounds: function () {\n                    if (!IS_IOS) {\n                        this.audioContext = new AudioContext();\n\n                        var resourceTemplate =\n                            document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\n\n                        for (var sound in Runner.sounds) {\n                            var soundSrc =\n                                resourceTemplate.getElementById(Runner.sounds[sound]).src;\n                            soundSrc = soundSrc.substr(soundSrc.indexOf(",") + 1);\n                            var buffer = decodeBase64ToArrayBuffer(soundSrc);\n\n                            // Async, so no guarantee of order in array.\n                            this.audioContext.decodeAudioData(buffer, function (index, audioData) {\n                                this.soundFx[index] = audioData;\n                            }.bind(this, sound));\n                        }\n                    }\n                },\n\n                /**\n                 * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\n                 * @param {number} opt_speed\n                 */\n                setSpeed: function (opt_speed) {\n                    var speed = opt_speed || this.currentSpeed;\n\n                    // Reduce the speed on smaller mobile screens.\n                    if (this.dimensions.WIDTH < DEFAULT_WIDTH) {\n                        var mobileSpeed = speed * this.dimensions.WIDTH / DEFAULT_WIDTH *\n                            this.config.MOBILE_SPEED_COEFFICIENT;\n                        this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\n                    } else if (opt_speed) {\n                        this.currentSpeed = opt_speed;\n                    }\n                },\n\n                /**\n                 * Game initialiser.\n                 */\n                init: function () {\n                    // Hide the static icon.\n                    document.querySelector("." + Runner.classes.ICON).style.visibility =\n                        "hidden";\n\n                    this.adjustDimensions();\n                    this.setSpeed();\n\n                    this.containerEl = document.createElement("div");\n                    this.containerEl.className = Runner.classes.CONTAINER;\n\n                    // Player canvas container.\n                    this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH,\n                        this.dimensions.HEIGHT, Runner.classes.PLAYER);\n\n                    this.canvasCtx = this.canvas.getContext("2d");\n                    this.canvasCtx.fillStyle = "#f7f7f7";\n                    this.canvasCtx.fill();\n                    Runner.updateCanvasScaling(this.canvas);\n\n                    // Horizon contains clouds, obstacles and the ground.\n                    this.horizon = new Horizon(this.canvas, this.spriteDef, this.dimensions,\n                        this.config.GAP_COEFFICIENT);\n\n                    // Distance meter\n                    this.distanceMeter = new DistanceMeter(this.canvas,\n                        this.spriteDef.TEXT_SPRITE, this.dimensions.WIDTH);\n\n                    // Draw t-rex\n                    this.tRex = new Trex(this.canvas, this.spriteDef.TREX);\n\n                    this.outerContainerEl.appendChild(this.containerEl);\n\n                    if (IS_MOBILE) {\n                        this.createTouchController();\n                    }\n\n                    this.startListening();\n                    this.update();\n\n                    window.addEventListener(Runner.events.RESIZE,\n                        this.debounceResize.bind(this));\n                },\n\n                /**\n                 * Create the touch controller. A div that covers whole screen.\n                 */\n                createTouchController: function () {\n                    this.touchController = document.createElement("div");\n                    this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\n                    this.outerContainerEl.appendChild(this.touchController);\n                },\n\n                /**\n                 * Debounce the resize event.\n                 */\n                debounceResize: function () {\n                    if (!this.resizeTimerId_) {\n                        this.resizeTimerId_ =\n                            setInterval(this.adjustDimensions.bind(this), 250);\n                    }\n                },\n\n                /**\n                 * Adjust game space dimensions on resize.\n                 */\n                adjustDimensions: function () {\n                    clearInterval(this.resizeTimerId_);\n                    this.resizeTimerId_ = null;\n\n                    var boxStyles = window.getComputedStyle(this.outerContainerEl);\n                    var padding = Number(boxStyles.paddingLeft.substr(0,\n                        boxStyles.paddingLeft.length - 2));\n\n                    this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\n\n                    // Redraw the elements back onto the canvas.\n                    if (this.canvas) {\n                        this.canvas.width = this.dimensions.WIDTH;\n                        this.canvas.height = this.dimensions.HEIGHT;\n\n                        Runner.updateCanvasScaling(this.canvas);\n\n                        this.distanceMeter.calcXPos(this.dimensions.WIDTH);\n                        this.clearCanvas();\n                        this.horizon.update(0, 0, true);\n                        this.tRex.update(0);\n\n                        // Outer container and distance meter.\n                        if (this.playing || this.crashed || this.paused) {\n                            this.containerEl.style.width = this.dimensions.WIDTH + "px";\n                            this.containerEl.style.height = this.dimensions.HEIGHT + "px";\n                            this.distanceMeter.update(0, Math.ceil(this.distanceRan));\n                            this.stop();\n                        } else {\n                            this.tRex.draw(0, 0);\n                        }\n\n                        // Game over panel.\n                        if (this.crashed && this.gameOverPanel) {\n                            this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\n                            this.gameOverPanel.draw();\n                        }\n                    }\n                },\n\n                /**\n                 * Play the game intro.\n                 * Canvas container width expands out to the full width.\n                 */\n                playIntro: function () {\n                    if (!this.activated && !this.crashed) {\n                        this.playingIntro = true;\n                        this.tRex.playingIntro = true;\n\n                        // CSS animation definition.\n                        var keyframes = "@-webkit-keyframes intro { " +\n                            "from { width:" + Trex.config.WIDTH + "px }" +\n                            "to { width: " + this.dimensions.WIDTH + "px }" +\n                            "}";\n\n                        // create a style sheet to put the keyframe rule in \n                        // and then place the style sheet in the html head    \n                        var sheet = document.createElement("style");\n                        sheet.innerHTML = keyframes;\n                        document.head.appendChild(sheet);\n\n                        this.containerEl.addEventListener(Runner.events.ANIM_END,\n                            this.startGame.bind(this));\n\n                        this.containerEl.style.webkitAnimation = "intro .4s ease-out 1 both";\n                        this.containerEl.style.width = this.dimensions.WIDTH + "px";\n\n                        // if (this.touchController) {\n                        //     this.outerContainerEl.appendChild(this.touchController);\n                        // }\n                        this.playing = true;\n                        this.activated = true;\n                    } else if (this.crashed) {\n                        this.restart();\n                    }\n                },\n\n\n                /**\n                 * Update the game status to started.\n                 */\n                startGame: function () {\n                    this.runningTime = 0;\n                    this.playingIntro = false;\n                    this.tRex.playingIntro = false;\n                    this.containerEl.style.webkitAnimation = "";\n                    this.playCount++;\n\n                    // Handle tabbing off the page. Pause the current game.\n                    document.addEventListener(Runner.events.VISIBILITY,\n                        this.onVisibilityChange.bind(this));\n\n                    window.addEventListener(Runner.events.BLUR,\n                        this.onVisibilityChange.bind(this));\n\n                    window.addEventListener(Runner.events.FOCUS,\n                        this.onVisibilityChange.bind(this));\n                },\n\n                clearCanvas: function () {\n                    this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH,\n                        this.dimensions.HEIGHT);\n                },\n\n                /**\n                 * Update the game frame and schedules the next one.\n                 */\n                update: function () {\n                    this.updatePending = false;\n\n                    var now = getTimeStamp();\n                    var deltaTime = now - (this.time || now);\n                    this.time = now;\n\n                    if (this.playing) {\n                        this.clearCanvas();\n\n                        if (this.tRex.jumping) {\n                            this.tRex.updateJump(deltaTime);\n                        }\n\n                        this.runningTime += deltaTime;\n                        var hasObstacles = this.runningTime > this.config.CLEAR_TIME;\n\n                        // First jump triggers the intro.\n                        if (this.tRex.jumpCount == 1 && !this.playingIntro) {\n                            this.playIntro();\n                        }\n\n                        // The horizon doesn"t move until the intro is over.\n                        if (this.playingIntro) {\n                            this.horizon.update(0, this.currentSpeed, hasObstacles);\n                        } else {\n                            deltaTime = !this.activated ? 0 : deltaTime;\n                            this.horizon.update(deltaTime, this.currentSpeed, hasObstacles,\n                                this.inverted);\n                        }\n\n                        // Check for collisions.\n                        var collision = hasObstacles &&\n                            checkForCollision(this.horizon.obstacles[0], this.tRex);\n\n                        if (!collision) {\n                            this.distanceRan += this.currentSpeed * deltaTime / this.msPerFrame;\n\n                            if (this.currentSpeed < this.config.MAX_SPEED) {\n                                this.currentSpeed += this.config.ACCELERATION;\n                            }\n                        } else {\n                            this.gameOver();\n                        }\n\n                        var playAchievementSound = this.distanceMeter.update(deltaTime,\n                            Math.ceil(this.distanceRan));\n\n                        if (playAchievementSound) {\n                            this.playSound(this.soundFx.SCORE);\n                        }\n\n                        // Night mode.\n                        if (this.invertTimer > this.config.INVERT_FADE_DURATION) {\n                            this.invertTimer = 0;\n                            this.invertTrigger = false;\n                            this.invert();\n                        } else if (this.invertTimer) {\n                            this.invertTimer += deltaTime;\n                        } else {\n                            var actualDistance =\n                                this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));\n\n                            if (actualDistance > 0) {\n                                this.invertTrigger = !(actualDistance %\n                                    this.config.INVERT_DISTANCE);\n\n                                if (this.invertTrigger && this.invertTimer === 0) {\n                                    this.invertTimer += deltaTime;\n                                    this.invert();\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.playing || (!this.activated &&\n                        this.tRex.blinkCount < Runner.config.MAX_BLINK_COUNT)) {\n                        this.tRex.update(deltaTime);\n                        this.scheduleNextUpdate();\n                    }\n                },\n\n                /**\n                 * Event handler.\n                 */\n                handleEvent: function (e) {\n                    return (function (evtType, events) {\n                        switch (evtType) {\n                            case events.KEYDOWN:\n                            case events.TOUCHSTART:\n                            case events.MOUSEDOWN:\n                                this.onKeyDown(e);\n                                break;\n                            case events.KEYUP:\n                            case events.TOUCHEND:\n                            case events.MOUSEUP:\n                                this.onKeyUp(e);\n                                break;\n                        }\n                    }.bind(this))(e.type, Runner.events);\n                },\n\n                /**\n                 * Bind relevant key / mouse / touch listeners.\n                 */\n                startListening: function () {\n                    // Keys.\n                    document.addEventListener(Runner.events.KEYDOWN, this);\n                    document.addEventListener(Runner.events.KEYUP, this);\n\n                    if (IS_MOBILE) {\n                        // Mobile only touch devices.\n                        this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\n                        this.touchController.addEventListener(Runner.events.TOUCHEND, this);\n                        this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\n                    } else {\n                        // Mouse.\n                        document.addEventListener(Runner.events.MOUSEDOWN, this);\n                        document.addEventListener(Runner.events.MOUSEUP, this);\n                    }\n                },\n\n                /**\n                 * Remove all listeners.\n                 */\n                stopListening: function () {\n                    document.removeEventListener(Runner.events.KEYDOWN, this);\n                    document.removeEventListener(Runner.events.KEYUP, this);\n\n                    if (IS_MOBILE) {\n                        this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\n                        this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\n                        this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\n                    } else {\n                        document.removeEventListener(Runner.events.MOUSEDOWN, this);\n                        document.removeEventListener(Runner.events.MOUSEUP, this);\n                    }\n                },\n\n                /**\n                 * Process keydown.\n                 * @param {Event} e\n                 */\n                onKeyDown: function (e) {\n                    // Prevent native page scrolling whilst tapping on mobile.\n                    if (IS_MOBILE && this.playing) {\n                        e.preventDefault();\n                    }\n\n                    if (e.target != this.detailsButton) {\n                        if (!this.crashed && (Runner.keycodes.JUMP[e.keyCode] ||\n                            e.type == Runner.events.TOUCHSTART)) {\n                            if (!this.playing) {\n                                this.loadSounds();\n                                this.playing = true;\n                                this.update();\n                                if (window.errorPageController) {\n                                    errorPageController.trackEasterEgg();\n                                }\n                            }\n                            //  Play sound effect and jump on starting the game for the first time.\n                            if (!this.tRex.jumping && !this.tRex.ducking) {\n                                this.playSound(this.soundFx.BUTTON_PRESS);\n                                this.tRex.startJump(this.currentSpeed);\n                            }\n                        }\n\n                        if (this.crashed && e.type == Runner.events.TOUCHSTART &&\n                            e.currentTarget == this.containerEl) {\n                            this.restart();\n                        }\n                    }\n\n                    if (this.playing && !this.crashed && Runner.keycodes.DUCK[e.keyCode]) {\n                        e.preventDefault();\n                        if (this.tRex.jumping) {\n                            // Speed drop, activated only when jump key is not pressed.\n                            this.tRex.setSpeedDrop();\n                        } else if (!this.tRex.jumping && !this.tRex.ducking) {\n                            // Duck.\n                            this.tRex.setDuck(true);\n                        }\n                    }\n                },\n\n\n                /**\n                 * Process key up.\n                 * @param {Event} e\n                 */\n                onKeyUp: function (e) {\n                    var keyCode = String(e.keyCode);\n                    var isjumpKey = Runner.keycodes.JUMP[keyCode] ||\n                        e.type == Runner.events.TOUCHEND ||\n                        e.type == Runner.events.MOUSEDOWN;\n\n                    if (this.isRunning() && isjumpKey) {\n                        this.tRex.endJump();\n                    } else if (Runner.keycodes.DUCK[keyCode]) {\n                        this.tRex.speedDrop = false;\n                        this.tRex.setDuck(false);\n                    } else if (this.crashed) {\n                        // Check that enough time has elapsed before allowing jump key to restart.\n                        var deltaTime = getTimeStamp() - this.time;\n\n                        if (Runner.keycodes.RESTART[keyCode] || this.isLeftClickOnCanvas(e) ||\n                            (deltaTime >= this.config.GAMEOVER_CLEAR_TIME &&\n                                Runner.keycodes.JUMP[keyCode])) {\n                            this.restart();\n                        }\n                    } else if (this.paused && isjumpKey) {\n                        // Reset the jump state\n                        this.tRex.reset();\n                        this.play();\n                    }\n                },\n\n                /**\n                 * Returns whether the event was a left click on canvas.\n                 * On Windows right click is registered as a click.\n                 * @param {Event} e\n                 * @return {boolean}\n                 */\n                isLeftClickOnCanvas: function (e) {\n                    return e.button != null && e.button < 2 &&\n                        e.type == Runner.events.MOUSEUP && e.target == this.canvas;\n                },\n\n                /**\n                 * RequestAnimationFrame wrapper.\n                 */\n                scheduleNextUpdate: function () {\n                    if (!this.updatePending) {\n                        this.updatePending = true;\n                        this.raqId = requestAnimationFrame(this.update.bind(this));\n                    }\n                },\n\n                /**\n                 * Whether the game is running.\n                 * @return {boolean}\n                 */\n                isRunning: function () {\n                    return !!this.raqId;\n                },\n\n                /**\n                 * Game over state.\n                 */\n                gameOver: function () {\n                    this.playSound(this.soundFx.HIT);\n                    vibrate(200);\n\n                    this.stop();\n                    this.crashed = true;\n                    this.distanceMeter.acheivement = false;\n\n                    this.tRex.update(100, Trex.status.CRASHED);\n\n                    // Game over panel.\n                    if (!this.gameOverPanel) {\n                        this.gameOverPanel = new GameOverPanel(this.canvas,\n                            this.spriteDef.TEXT_SPRITE, this.spriteDef.RESTART,\n                            this.dimensions);\n                    } else {\n                        this.gameOverPanel.draw();\n                    }\n\n                    // Update the high score.\n                    if (this.distanceRan > this.highestScore) {\n                        this.highestScore = Math.ceil(this.distanceRan);\n                        this.distanceMeter.setHighScore(this.highestScore);\n                    }\n\n                    // Reset the time clock.\n                    this.time = getTimeStamp();\n                },\n\n                stop: function () {\n                    this.playing = false;\n                    this.paused = true;\n                    cancelAnimationFrame(this.raqId);\n                    this.raqId = 0;\n                },\n\n                play: function () {\n                    if (!this.crashed) {\n                        this.playing = true;\n                        this.paused = false;\n                        this.tRex.update(0, Trex.status.RUNNING);\n                        this.time = getTimeStamp();\n                        this.update();\n                    }\n                },\n\n                restart: function () {\n                    if (!this.raqId) {\n                        this.playCount++;\n                        this.runningTime = 0;\n                        this.playing = true;\n                        this.crashed = false;\n                        this.distanceRan = 0;\n                        this.setSpeed(this.config.SPEED);\n                        this.time = getTimeStamp();\n                        this.containerEl.classList.remove(Runner.classes.CRASHED);\n                        this.clearCanvas();\n                        this.distanceMeter.reset(this.highestScore);\n                        this.horizon.reset();\n                        this.tRex.reset();\n                        this.playSound(this.soundFx.BUTTON_PRESS);\n                        this.invert(true);\n                        this.update();\n                    }\n                },\n\n                /**\n                 * Pause the game if the tab is not in focus.\n                 */\n                onVisibilityChange: function (e) {\n                    if (document.hidden || document.webkitHidden || e.type == "blur" ||\n                        document.visibilityState != "visible") {\n                        this.stop();\n                    } else if (!this.crashed) {\n                        this.tRex.reset();\n                        this.play();\n                    }\n                },\n\n                /**\n                 * Play a sound.\n                 * @param {SoundBuffer} soundBuffer\n                 */\n                playSound: function (soundBuffer) {\n                    if (soundBuffer) {\n                        var sourceNode = this.audioContext.createBufferSource();\n                        sourceNode.buffer = soundBuffer;\n                        sourceNode.connect(this.audioContext.destination);\n                        sourceNode.start(0);\n                    }\n                },\n\n                /**\n                 * Inverts the current page / canvas colors.\n                 * @param {boolean} Whether to reset colors.\n                 */\n                invert: function (reset) {\n                    if (reset) {\n                        document.body.classList.toggle(Runner.classes.INVERTED, false);\n                        this.invertTimer = 0;\n                        this.inverted = false;\n                    } else {\n                        this.inverted = document.body.classList.toggle(Runner.classes.INVERTED,\n                            this.invertTrigger);\n                    }\n                }\n            };\n\n\n            /**\n             * Updates the canvas size taking into\n             * account the backing store pixel ratio and\n             * the device pixel ratio.\n             *\n             * See article by Paul Lewis:\n             * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\n             *\n             * @param {HTMLCanvasElement} canvas\n             * @param {number} opt_width\n             * @param {number} opt_height\n             * @return {boolean} Whether the canvas was scaled.\n             */\n            Runner.updateCanvasScaling = function (canvas, opt_width, opt_height) {\n                var context = canvas.getContext("2d");\n\n                // Query the various pixel ratios\n                var devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\n                var backingStoreRatio = Math.floor(context.webkitBackingStorePixelRatio) || 1;\n                var ratio = devicePixelRatio / backingStoreRatio;\n\n                // Upscale the canvas if the two ratios don"t match\n                if (devicePixelRatio !== backingStoreRatio) {\n                    var oldWidth = opt_width || canvas.width;\n                    var oldHeight = opt_height || canvas.height;\n\n                    canvas.width = oldWidth * ratio;\n                    canvas.height = oldHeight * ratio;\n\n                    canvas.style.width = oldWidth + "px";\n                    canvas.style.height = oldHeight + "px";\n\n                    // Scale the context to counter the fact that we"ve manually scaled\n                    // our canvas element.\n                    context.scale(ratio, ratio);\n                    return true;\n                } else if (devicePixelRatio == 1) {\n                    // Reset the canvas width / height. Fixes scaling bug when the page is\n                    // zoomed and the devicePixelRatio changes accordingly.\n                    canvas.style.width = canvas.width + "px";\n                    canvas.style.height = canvas.height + "px";\n                }\n                return false;\n            };\n\n\n            /**\n             * Get random number.\n             * @param {number} min\n             * @param {number} max\n             * @param {number}\n             */\n            function getRandomNum(min, max) {\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n\n            /**\n             * Vibrate on mobile devices.\n             * @param {number} duration Duration of the vibration in milliseconds.\n             */\n            function vibrate(duration) {\n                if (IS_MOBILE && window.navigator.vibrate) {\n                    window.navigator.vibrate(duration);\n                }\n            }\n\n\n            /**\n             * Create canvas element.\n             * @param {HTMLElement} container Element to append canvas to.\n             * @param {number} width\n             * @param {number} height\n             * @param {string} opt_classname\n             * @return {HTMLCanvasElement}\n             */\n            function createCanvas(container, width, height, opt_classname) {\n                var canvas = document.createElement("canvas");\n                canvas.className = opt_classname ? Runner.classes.CANVAS + " " +\n                    opt_classname : Runner.classes.CANVAS;\n                canvas.width = width;\n                canvas.height = height;\n                container.appendChild(canvas);\n\n                return canvas;\n            }\n\n\n            /**\n             * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\n             * @param {string} base64String\n             */\n            function decodeBase64ToArrayBuffer(base64String) {\n                var len = (base64String.length / 4) * 3;\n                var str = atob(base64String);\n                var arrayBuffer = new ArrayBuffer(len);\n                var bytes = new Uint8Array(arrayBuffer);\n\n                for (var i = 0; i < len; i++) {\n                    bytes[i] = str.charCodeAt(i);\n                }\n                return bytes.buffer;\n            }\n\n\n            /**\n             * Return the current timestamp.\n             * @return {number}\n             */\n            function getTimeStamp() {\n                return IS_IOS ? new Date().getTime() : performance.now();\n            }\n\n\n            //******************************************************************************\n\n\n            /**\n             * Game over panel.\n             * @param {!HTMLCanvasElement} canvas\n             * @param {Object} textImgPos\n             * @param {Object} restartImgPos\n             * @param {!Object} dimensions Canvas dimensions.\n             * @constructor\n             */\n            function GameOverPanel(canvas, textImgPos, restartImgPos, dimensions) {\n                this.canvas = canvas;\n                this.canvasCtx = canvas.getContext("2d");\n                this.canvasDimensions = dimensions;\n                this.textImgPos = textImgPos;\n                this.restartImgPos = restartImgPos;\n                this.draw();\n            };\n\n\n            /**\n             * Dimensions used in the panel.\n             * @enum {number}\n             */\n            GameOverPanel.dimensions = {\n                TEXT_X: 0,\n                TEXT_Y: 13,\n                TEXT_WIDTH: 191,\n                TEXT_HEIGHT: 11,\n                RESTART_WIDTH: 36,\n                RESTART_HEIGHT: 32\n            };\n\n\n            GameOverPanel.prototype = {\n                /**\n                 * Update the panel dimensions.\n                 * @param {number} width New canvas width.\n                 * @param {number} opt_height Optional new canvas height.\n                 */\n                updateDimensions: function (width, opt_height) {\n                    this.canvasDimensions.WIDTH = width;\n                    if (opt_height) {\n                        this.canvasDimensions.HEIGHT = opt_height;\n                    }\n                },\n\n                /**\n                 * Draw the panel.\n                 */\n                draw: function () {\n                    var dimensions = GameOverPanel.dimensions;\n\n                    var centerX = this.canvasDimensions.WIDTH / 2;\n\n                    // Game over text.\n                    var textSourceX = dimensions.TEXT_X;\n                    var textSourceY = dimensions.TEXT_Y;\n                    var textSourceWidth = dimensions.TEXT_WIDTH;\n                    var textSourceHeight = dimensions.TEXT_HEIGHT;\n\n                    var textTargetX = Math.round(centerX - (dimensions.TEXT_WIDTH / 2));\n                    var textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) / 3);\n                    var textTargetWidth = dimensions.TEXT_WIDTH;\n                    var textTargetHeight = dimensions.TEXT_HEIGHT;\n\n                    var restartSourceWidth = dimensions.RESTART_WIDTH;\n                    var restartSourceHeight = dimensions.RESTART_HEIGHT;\n                    var restartTargetX = centerX - (dimensions.RESTART_WIDTH / 2);\n                    var restartTargetY = this.canvasDimensions.HEIGHT / 2;\n\n                    if (IS_HIDPI) {\n                        textSourceY *= 2;\n                        textSourceX *= 2;\n                        textSourceWidth *= 2;\n                        textSourceHeight *= 2;\n                        restartSourceWidth *= 2;\n                        restartSourceHeight *= 2;\n                    }\n\n                    textSourceX += this.textImgPos.x;\n                    textSourceY += this.textImgPos.y;\n\n                    // Game over text from sprite.\n                    this.canvasCtx.drawImage(Runner.imageSprite,\n                        textSourceX, textSourceY, textSourceWidth, textSourceHeight,\n                        textTargetX, textTargetY, textTargetWidth, textTargetHeight);\n\n                    // Restart button.\n                    this.canvasCtx.drawImage(Runner.imageSprite,\n                        this.restartImgPos.x, this.restartImgPos.y,\n                        restartSourceWidth, restartSourceHeight,\n                        restartTargetX, restartTargetY, dimensions.RESTART_WIDTH,\n                        dimensions.RESTART_HEIGHT);\n                }\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Check for a collision.\n             * @param {!Obstacle} obstacle\n             * @param {!Trex} tRex T-rex object.\n             * @param {HTMLCanvasContext} opt_canvasCtx Optional canvas context for drawing\n             *    collision boxes.\n             * @return {Array<CollisionBox>}\n             */\n            function checkForCollision(obstacle, tRex, opt_canvasCtx) {\n                var obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\n\n                // Adjustments are made to the bounding box as there is a 1 pixel white\n                // border around the t-rex and obstacles.\n                var tRexBox = new CollisionBox(\n                    tRex.xPos + 1,\n                    tRex.yPos + 1,\n                    tRex.config.WIDTH - 2,\n                    tRex.config.HEIGHT - 2);\n\n                var obstacleBox = new CollisionBox(\n                    obstacle.xPos + 1,\n                    obstacle.yPos + 1,\n                    obstacle.typeConfig.width * obstacle.size - 2,\n                    obstacle.typeConfig.height - 2);\n\n                // Debug outer box\n                if (opt_canvasCtx) {\n                    drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\n                }\n\n                // Simple outer bounds check.\n                if (boxCompare(tRexBox, obstacleBox)) {\n                    var collisionBoxes = obstacle.collisionBoxes;\n                    var tRexCollisionBoxes = tRex.ducking ?\n                        Trex.collisionBoxes.DUCKING : Trex.collisionBoxes.RUNNING;\n\n                    // Detailed axis aligned box check.\n                    for (var t = 0; t < tRexCollisionBoxes.length; t++) {\n                        for (var i = 0; i < collisionBoxes.length; i++) {\n                            // Adjust the box to actual positions.\n                            var adjTrexBox =\n                                createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\n                            var adjObstacleBox =\n                                createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\n                            var crashed = boxCompare(adjTrexBox, adjObstacleBox);\n\n                            // Draw boxes for debug.\n                            if (opt_canvasCtx) {\n                                drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\n                            }\n\n                            if (crashed) {\n                                return [adjTrexBox, adjObstacleBox];\n                            }\n                        }\n                    }\n                }\n                return false;\n            };\n\n\n            /**\n             * Adjust the collision box.\n             * @param {!CollisionBox} box The original box.\n             * @param {!CollisionBox} adjustment Adjustment box.\n             * @return {CollisionBox} The adjusted collision box object.\n             */\n            function createAdjustedCollisionBox(box, adjustment) {\n                return new CollisionBox(\n                    box.x + adjustment.x,\n                    box.y + adjustment.y,\n                    box.width,\n                    box.height);\n            };\n\n\n            /**\n             * Draw the collision boxes for debug.\n             */\n            function drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\n                canvasCtx.save();\n                canvasCtx.strokeStyle = "#f00";\n                canvasCtx.strokeRect(tRexBox.x, tRexBox.y, tRexBox.width, tRexBox.height);\n\n                canvasCtx.strokeStyle = "#0f0";\n                canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y,\n                    obstacleBox.width, obstacleBox.height);\n                canvasCtx.restore();\n            };\n\n\n            /**\n             * Compare two collision boxes for a collision.\n             * @param {CollisionBox} tRexBox\n             * @param {CollisionBox} obstacleBox\n             * @return {boolean} Whether the boxes intersected.\n             */\n            function boxCompare(tRexBox, obstacleBox) {\n                var crashed = false;\n                var tRexBoxX = tRexBox.x;\n                var tRexBoxY = tRexBox.y;\n\n                var obstacleBoxX = obstacleBox.x;\n                var obstacleBoxY = obstacleBox.y;\n\n                // Axis-Aligned Bounding Box method.\n                if (tRexBox.x < obstacleBoxX + obstacleBox.width &&\n                    tRexBox.x + tRexBox.width > obstacleBoxX &&\n                    tRexBox.y < obstacleBox.y + obstacleBox.height &&\n                    tRexBox.height + tRexBox.y > obstacleBox.y) {\n                    crashed = true;\n                }\n\n                return crashed;\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Collision box object.\n             * @param {number} x X position.\n             * @param {number} y Y Position.\n             * @param {number} w Width.\n             * @param {number} h Height.\n             */\n            function CollisionBox(x, y, w, h) {\n                this.x = x;\n                this.y = y;\n                this.width = w;\n                this.height = h;\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Obstacle.\n             * @param {HTMLCanvasCtx} canvasCtx\n             * @param {Obstacle.type} type\n             * @param {Object} spritePos Obstacle position in sprite.\n             * @param {Object} dimensions\n             * @param {number} gapCoefficient Mutipler in determining the gap.\n             * @param {number} speed\n             * @param {number} opt_xOffset\n             */\n            function Obstacle(canvasCtx, type, spriteImgPos, dimensions,\n                gapCoefficient, speed, opt_xOffset) {\n\n                this.canvasCtx = canvasCtx;\n                this.spritePos = spriteImgPos;\n                this.typeConfig = type;\n                this.gapCoefficient = gapCoefficient;\n                this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\n                this.dimensions = dimensions;\n                this.remove = false;\n                this.xPos = dimensions.WIDTH + (opt_xOffset || 0);\n                this.yPos = 0;\n                this.width = 0;\n                this.collisionBoxes = [];\n                this.gap = 0;\n                this.speedOffset = 0;\n\n                // For animated obstacles.\n                this.currentFrame = 0;\n                this.timer = 0;\n\n                this.init(speed);\n            };\n\n            /**\n             * Coefficient for calculating the maximum gap.\n             * @const\n             */\n            Obstacle.MAX_GAP_COEFFICIENT = 1.5;\n\n            /**\n             * Maximum obstacle grouping count.\n             * @const\n             */\n            Obstacle.MAX_OBSTACLE_LENGTH = 3,\n\n\n                Obstacle.prototype = {\n                    /**\n                     * Initialise the DOM for the obstacle.\n                     * @param {number} speed\n                     */\n                    init: function (speed) {\n                        this.cloneCollisionBoxes();\n\n                        // Only allow sizing if we"re at the right speed.\n                        if (this.size > 1 && this.typeConfig.multipleSpeed > speed) {\n                            this.size = 1;\n                        }\n\n                        this.width = this.typeConfig.width * this.size;\n\n                        // Check if obstacle can be positioned at various heights.\n                        if (Array.isArray(this.typeConfig.yPos)) {\n                            var yPosConfig = IS_MOBILE ? this.typeConfig.yPosMobile :\n                                this.typeConfig.yPos;\n                            this.yPos = yPosConfig[getRandomNum(0, yPosConfig.length - 1)];\n                        } else {\n                            this.yPos = this.typeConfig.yPos;\n                        }\n\n                        this.draw();\n\n                        // Make collision box adjustments,\n                        // Central box is adjusted to the size as one box.\n                        //      ____        ______        ________\n                        //    _|   |-|    _|     |-|    _|       |-|\n                        //   | |<->| |   | |<---\x3e| |   | |<-----\x3e| |\n                        //   | | 1 | |   | |  2  | |   | |   3   | |\n                        //   |_|___|_|   |_|_____|_|   |_|_______|_|\n                        //\n                        if (this.size > 1) {\n                            this.collisionBoxes[1].width = this.width - this.collisionBoxes[0].width -\n                                this.collisionBoxes[2].width;\n                            this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\n                        }\n\n                        // For obstacles that go at a different speed from the horizon.\n                        if (this.typeConfig.speedOffset) {\n                            this.speedOffset = Math.random() > 0.5 ? this.typeConfig.speedOffset :\n                                -this.typeConfig.speedOffset;\n                        }\n\n                        this.gap = this.getGap(this.gapCoefficient, speed);\n                    },\n\n                    /**\n                     * Draw and crop based on size.\n                     */\n                    draw: function () {\n                        var sourceWidth = this.typeConfig.width;\n                        var sourceHeight = this.typeConfig.height;\n\n                        if (IS_HIDPI) {\n                            sourceWidth = sourceWidth * 2;\n                            sourceHeight = sourceHeight * 2;\n                        }\n\n                        // X position in sprite.\n                        var sourceX = (sourceWidth * this.size) * (0.5 * (this.size - 1)) +\n                            this.spritePos.x;\n\n                        // Animation frames.\n                        if (this.currentFrame > 0) {\n                            sourceX += sourceWidth * this.currentFrame;\n                        }\n\n                        this.canvasCtx.drawImage(Runner.imageSprite,\n                            sourceX, this.spritePos.y,\n                            sourceWidth * this.size, sourceHeight,\n                            this.xPos, this.yPos,\n                            this.typeConfig.width * this.size, this.typeConfig.height);\n                    },\n\n                    /**\n                     * Obstacle frame update.\n                     * @param {number} deltaTime\n                     * @param {number} speed\n                     */\n                    update: function (deltaTime, speed) {\n                        if (!this.remove) {\n                            if (this.typeConfig.speedOffset) {\n                                speed += this.speedOffset;\n                            }\n                            this.xPos -= Math.floor((speed * FPS / 1000) * deltaTime);\n\n                            // Update frame\n                            if (this.typeConfig.numFrames) {\n                                this.timer += deltaTime;\n                                if (this.timer >= this.typeConfig.frameRate) {\n                                    this.currentFrame =\n                                        this.currentFrame == this.typeConfig.numFrames - 1 ?\n                                            0 : this.currentFrame + 1;\n                                    this.timer = 0;\n                                }\n                            }\n                            this.draw();\n\n                            if (!this.isVisible()) {\n                                this.remove = true;\n                            }\n                        }\n                    },\n\n                    /**\n                     * Calculate a random gap size.\n                     * - Minimum gap gets wider as speed increses\n                     * @param {number} gapCoefficient\n                     * @param {number} speed\n                     * @return {number} The gap size.\n                     */\n                    getGap: function (gapCoefficient, speed) {\n                        var minGap = Math.round(this.width * speed +\n                            this.typeConfig.minGap * gapCoefficient);\n                        var maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\n                        return getRandomNum(minGap, maxGap);\n                    },\n\n                    /**\n                     * Check if obstacle is visible.\n                     * @return {boolean} Whether the obstacle is in the game area.\n                     */\n                    isVisible: function () {\n                        return this.xPos + this.width > 0;\n                    },\n\n                    /**\n                     * Make a copy of the collision boxes, since these will change based on\n                     * obstacle type and size.\n                     */\n                    cloneCollisionBoxes: function () {\n                        var collisionBoxes = this.typeConfig.collisionBoxes;\n\n                        for (var i = collisionBoxes.length - 1; i >= 0; i--) {\n                            this.collisionBoxes[i] = new CollisionBox(collisionBoxes[i].x,\n                                collisionBoxes[i].y, collisionBoxes[i].width,\n                                collisionBoxes[i].height);\n                        }\n                    }\n                };\n\n\n            /**\n             * Obstacle definitions.\n             * minGap: minimum pixel space betweeen obstacles.\n             * multipleSpeed: Speed at which multiples are allowed.\n             * speedOffset: speed faster / slower than the horizon.\n             * minSpeed: Minimum speed which the obstacle can make an appearance.\n             */\n            Obstacle.types = [\n                {\n                    type: "CACTUS_SMALL",\n                    width: 17,\n                    height: 35,\n                    yPos: 105,\n                    multipleSpeed: 4,\n                    minGap: 120,\n                    minSpeed: 0,\n                    collisionBoxes: [\n                        new CollisionBox(0, 7, 5, 27),\n                        new CollisionBox(4, 0, 6, 34),\n                        new CollisionBox(10, 4, 7, 14)\n                    ]\n                },\n                {\n                    type: "CACTUS_LARGE",\n                    width: 25,\n                    height: 50,\n                    yPos: 90,\n                    multipleSpeed: 7,\n                    minGap: 120,\n                    minSpeed: 0,\n                    collisionBoxes: [\n                        new CollisionBox(0, 12, 7, 38),\n                        new CollisionBox(8, 0, 7, 49),\n                        new CollisionBox(13, 10, 10, 38)\n                    ]\n                },\n                {\n                    type: "PTERODACTYL",\n                    width: 46,\n                    height: 40,\n                    yPos: [100, 75, 50], // Variable height.\n                    yPosMobile: [100, 50], // Variable height mobile.\n                    multipleSpeed: 999,\n                    minSpeed: 8.5,\n                    minGap: 150,\n                    collisionBoxes: [\n                        new CollisionBox(15, 15, 16, 5),\n                        new CollisionBox(18, 21, 24, 6),\n                        new CollisionBox(2, 14, 4, 3),\n                        new CollisionBox(6, 10, 4, 7),\n                        new CollisionBox(10, 8, 6, 9)\n                    ],\n                    numFrames: 2,\n                    frameRate: 1000 / 6,\n                    speedOffset: .8\n                }\n            ];\n\n\n            //******************************************************************************\n            /**\n             * T-rex game character.\n             * @param {HTMLCanvas} canvas\n             * @param {Object} spritePos Positioning within image sprite.\n             * @constructor\n             */\n            function Trex(canvas, spritePos) {\n                this.canvas = canvas;\n                this.canvasCtx = canvas.getContext("2d");\n                this.spritePos = spritePos;\n                this.xPos = 0;\n                this.yPos = 0;\n                // Position when on the ground.\n                this.groundYPos = 0;\n                this.currentFrame = 0;\n                this.currentAnimFrames = [];\n                this.blinkDelay = 0;\n                this.blinkCount = 0;\n                this.animStartTime = 0;\n                this.timer = 0;\n                this.msPerFrame = 1000 / FPS;\n                this.config = Trex.config;\n                // Current status.\n                this.status = Trex.status.WAITING;\n\n                this.jumping = false;\n                this.ducking = false;\n                this.jumpVelocity = 0;\n                this.reachedMinHeight = false;\n                this.speedDrop = false;\n                this.jumpCount = 0;\n                this.jumpspotX = 0;\n\n                this.init();\n            };\n\n\n            /**\n             * T-rex player config.\n             * @enum {number}\n             */\n            Trex.config = {\n                DROP_VELOCITY: -5,\n                GRAVITY: 0.6,\n                HEIGHT: 47,\n                HEIGHT_DUCK: 25,\n                INIITAL_JUMP_VELOCITY: -10,\n                INTRO_DURATION: 1500,\n                MAX_JUMP_HEIGHT: 30,\n                MIN_JUMP_HEIGHT: 30,\n                SPEED_DROP_COEFFICIENT: 3,\n                SPRITE_WIDTH: 262,\n                START_X_POS: 50,\n                WIDTH: 44,\n                WIDTH_DUCK: 59\n            };\n\n\n            /**\n             * Used in collision detection.\n             * @type {Array<CollisionBox>}\n             */\n            Trex.collisionBoxes = {\n                DUCKING: [\n                    new CollisionBox(1, 18, 55, 25)\n                ],\n                RUNNING: [\n                    new CollisionBox(22, 0, 17, 16),\n                    new CollisionBox(1, 18, 30, 9),\n                    new CollisionBox(10, 35, 14, 8),\n                    new CollisionBox(1, 24, 29, 5),\n                    new CollisionBox(5, 30, 21, 4),\n                    new CollisionBox(9, 34, 15, 4)\n                ]\n            };\n\n\n            /**\n             * Animation states.\n             * @enum {string}\n             */\n            Trex.status = {\n                CRASHED: "CRASHED",\n                DUCKING: "DUCKING",\n                JUMPING: "JUMPING",\n                RUNNING: "RUNNING",\n                WAITING: "WAITING"\n            };\n\n            /**\n             * Blinking coefficient.\n             * @const\n             */\n            Trex.BLINK_TIMING = 7000;\n\n\n            /**\n             * Animation config for different states.\n             * @enum {Object}\n             */\n            Trex.animFrames = {\n                WAITING: {\n                    frames: [44, 0],\n                    msPerFrame: 1000 / 3\n                },\n                RUNNING: {\n                    frames: [88, 132],\n                    msPerFrame: 1000 / 12\n                },\n                CRASHED: {\n                    frames: [220],\n                    msPerFrame: 1000 / 60\n                },\n                JUMPING: {\n                    frames: [0],\n                    msPerFrame: 1000 / 60\n                },\n                DUCKING: {\n                    frames: [264, 323],\n                    msPerFrame: 1000 / 8\n                }\n            };\n\n\n            Trex.prototype = {\n                /**\n                 * T-rex player initaliser.\n                 * Sets the t-rex to blink at random intervals.\n                 */\n                init: function () {\n                    this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\n                        Runner.config.BOTTOM_PAD;\n                    this.yPos = this.groundYPos;\n                    this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\n\n                    this.draw(0, 0);\n                    this.update(0, Trex.status.WAITING);\n                },\n\n                /**\n                 * Setter for the jump velocity.\n                 * The approriate drop velocity is also set.\n                 */\n                setJumpVelocity: function (setting) {\n                    this.config.INIITAL_JUMP_VELOCITY = -setting;\n                    this.config.DROP_VELOCITY = -setting / 2;\n                },\n\n                /**\n                 * Set the animation status.\n                 * @param {!number} deltaTime\n                 * @param {Trex.status} status Optional status to switch to.\n                 */\n                update: function (deltaTime, opt_status) {\n                    this.timer += deltaTime;\n\n                    // Update the status.\n                    if (opt_status) {\n                        this.status = opt_status;\n                        this.currentFrame = 0;\n                        this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\n                        this.currentAnimFrames = Trex.animFrames[opt_status].frames;\n\n                        if (opt_status == Trex.status.WAITING) {\n                            this.animStartTime = getTimeStamp();\n                            this.setBlinkDelay();\n                        }\n                    }\n\n                    // Game intro animation, T-rex moves in from the left.\n                    if (this.playingIntro && this.xPos < this.config.START_X_POS) {\n                        this.xPos += Math.round((this.config.START_X_POS /\n                            this.config.INTRO_DURATION) * deltaTime);\n                    }\n\n                    if (this.status == Trex.status.WAITING) {\n                        this.blink(getTimeStamp());\n                    } else {\n                        this.draw(this.currentAnimFrames[this.currentFrame], 0);\n                    }\n\n                    // Update the frame position.\n                    if (this.timer >= this.msPerFrame) {\n                        this.currentFrame = this.currentFrame ==\n                            this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\n                        this.timer = 0;\n                    }\n\n                    // Speed drop becomes duck if the down key is still being pressed.\n                    if (this.speedDrop && this.yPos == this.groundYPos) {\n                        this.speedDrop = false;\n                        this.setDuck(true);\n                    }\n                },\n\n                /**\n                 * Draw the t-rex to a particular position.\n                 * @param {number} x\n                 * @param {number} y\n                 */\n                draw: function (x, y) {\n                    var sourceX = x;\n                    var sourceY = y;\n                    var sourceWidth = this.ducking && this.status != Trex.status.CRASHED ?\n                        this.config.WIDTH_DUCK : this.config.WIDTH;\n                    var sourceHeight = this.config.HEIGHT;\n\n                    if (IS_HIDPI) {\n                        sourceX *= 2;\n                        sourceY *= 2;\n                        sourceWidth *= 2;\n                        sourceHeight *= 2;\n                    }\n\n                    // Adjustments for sprite sheet position.\n                    sourceX += this.spritePos.x;\n                    sourceY += this.spritePos.y;\n\n                    // Ducking.\n                    if (this.ducking && this.status != Trex.status.CRASHED) {\n                        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\n                            sourceWidth, sourceHeight,\n                            this.xPos, this.yPos,\n                            this.config.WIDTH_DUCK, this.config.HEIGHT);\n                    } else {\n                        // Crashed whilst ducking. Trex is standing up so needs adjustment.\n                        if (this.ducking && this.status == Trex.status.CRASHED) {\n                            this.xPos++;\n                        }\n                        // Standing / running\n                        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\n                            sourceWidth, sourceHeight,\n                            this.xPos, this.yPos,\n                            this.config.WIDTH, this.config.HEIGHT);\n                    }\n                },\n\n                /**\n                 * Sets a random time for the blink to happen.\n                 */\n                setBlinkDelay: function () {\n                    this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\n                },\n\n                /**\n                 * Make t-rex blink at random intervals.\n                 * @param {number} time Current time in milliseconds.\n                 */\n                blink: function (time) {\n                    var deltaTime = time - this.animStartTime;\n\n                    if (deltaTime >= this.blinkDelay) {\n                        this.draw(this.currentAnimFrames[this.currentFrame], 0);\n\n                        if (this.currentFrame == 1) {\n                            // Set new random delay to blink.\n                            this.setBlinkDelay();\n                            this.animStartTime = time;\n                            this.blinkCount++;\n                        }\n                    }\n                },\n\n                /**\n                 * Initialise a jump.\n                 * @param {number} speed\n                 */\n                startJump: function (speed) {\n                    if (!this.jumping) {\n                        this.update(0, Trex.status.JUMPING);\n                        // Tweak the jump velocity based on the speed.\n                        this.jumpVelocity = this.config.INIITAL_JUMP_VELOCITY - (speed / 10);\n                        this.jumping = true;\n                        this.reachedMinHeight = false;\n                        this.speedDrop = false;\n                    }\n                },\n\n                /**\n                 * Jump is complete, falling down.\n                 */\n                endJump: function () {\n                    if (this.reachedMinHeight &&\n                        this.jumpVelocity < this.config.DROP_VELOCITY) {\n                        this.jumpVelocity = this.config.DROP_VELOCITY;\n                    }\n                },\n\n                /**\n                 * Update frame for a jump.\n                 * @param {number} deltaTime\n                 * @param {number} speed\n                 */\n                updateJump: function (deltaTime, speed) {\n                    var msPerFrame = Trex.animFrames[this.status].msPerFrame;\n                    var framesElapsed = deltaTime / msPerFrame;\n\n                    // Speed drop makes Trex fall faster.\n                    if (this.speedDrop) {\n                        this.yPos += Math.round(this.jumpVelocity *\n                            this.config.SPEED_DROP_COEFFICIENT * framesElapsed);\n                    } else {\n                        this.yPos += Math.round(this.jumpVelocity * framesElapsed);\n                    }\n\n                    this.jumpVelocity += this.config.GRAVITY * framesElapsed;\n\n                    // Minimum height has been reached.\n                    if (this.yPos < this.minJumpHeight || this.speedDrop) {\n                        this.reachedMinHeight = true;\n                    }\n\n                    // Reached max height\n                    if (this.yPos < this.config.MAX_JUMP_HEIGHT || this.speedDrop) {\n                        this.endJump();\n                    }\n\n                    // Back down at ground level. Jump completed.\n                    if (this.yPos > this.groundYPos) {\n                        this.reset();\n                        this.jumpCount++;\n                    }\n\n                    this.update(deltaTime);\n                },\n\n                /**\n                 * Set the speed drop. Immediately cancels the current jump.\n                 */\n                setSpeedDrop: function () {\n                    this.speedDrop = true;\n                    this.jumpVelocity = 1;\n                },\n\n                /**\n                 * @param {boolean} isDucking.\n                 */\n                setDuck: function (isDucking) {\n                    if (isDucking && this.status != Trex.status.DUCKING) {\n                        this.update(0, Trex.status.DUCKING);\n                        this.ducking = true;\n                    } else if (this.status == Trex.status.DUCKING) {\n                        this.update(0, Trex.status.RUNNING);\n                        this.ducking = false;\n                    }\n                },\n\n                /**\n                 * Reset the t-rex to running at start of game.\n                 */\n                reset: function () {\n                    this.yPos = this.groundYPos;\n                    this.jumpVelocity = 0;\n                    this.jumping = false;\n                    this.ducking = false;\n                    this.update(0, Trex.status.RUNNING);\n                    this.midair = false;\n                    this.speedDrop = false;\n                    this.jumpCount = 0;\n                }\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Handles displaying the distance meter.\n             * @param {!HTMLCanvasElement} canvas\n             * @param {Object} spritePos Image position in sprite.\n             * @param {number} canvasWidth\n             * @constructor\n             */\n            function DistanceMeter(canvas, spritePos, canvasWidth) {\n                this.canvas = canvas;\n                this.canvasCtx = canvas.getContext("2d");\n                this.image = Runner.imageSprite;\n                this.spritePos = spritePos;\n                this.x = 0;\n                this.y = 5;\n\n                this.currentDistance = 0;\n                this.maxScore = 0;\n                this.highScore = 0;\n                this.container = null;\n\n                this.digits = [];\n                this.acheivement = false;\n                this.defaultString = "";\n                this.flashTimer = 0;\n                this.flashIterations = 0;\n                this.invertTrigger = false;\n\n                this.config = DistanceMeter.config;\n                this.maxScoreUnits = this.config.MAX_DISTANCE_UNITS;\n                this.init(canvasWidth);\n            };\n\n\n            /**\n             * @enum {number}\n             */\n            DistanceMeter.dimensions = {\n                WIDTH: 10,\n                HEIGHT: 13,\n                DEST_WIDTH: 11\n            };\n\n\n            /**\n             * Y positioning of the digits in the sprite sheet.\n             * X position is always 0.\n             * @type {Array<number>}\n             */\n            DistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\n\n\n            /**\n             * Distance meter config.\n             * @enum {number}\n             */\n            DistanceMeter.config = {\n                // Number of digits.\n                MAX_DISTANCE_UNITS: 5,\n\n                // Distance that causes achievement animation.\n                ACHIEVEMENT_DISTANCE: 100,\n\n                // Used for conversion from pixel distance to a scaled unit.\n                COEFFICIENT: 0.025,\n\n                // Flash duration in milliseconds.\n                FLASH_DURATION: 1000 / 4,\n\n                // Flash iterations for achievement animation.\n                FLASH_ITERATIONS: 3\n            };\n\n\n            DistanceMeter.prototype = {\n                /**\n                 * Initialise the distance meter to "00000".\n                 * @param {number} width Canvas width in px.\n                 */\n                init: function (width) {\n                    var maxDistanceStr = "";\n\n                    this.calcXPos(width);\n                    this.maxScore = this.maxScoreUnits;\n                    for (var i = 0; i < this.maxScoreUnits; i++) {\n                        this.draw(i, 0);\n                        this.defaultString += "0";\n                        maxDistanceStr += "9";\n                    }\n\n                    this.maxScore = parseInt(maxDistanceStr);\n                },\n\n                /**\n                 * Calculate the xPos in the canvas.\n                 * @param {number} canvasWidth\n                 */\n                calcXPos: function (canvasWidth) {\n                    this.x = canvasWidth - (DistanceMeter.dimensions.DEST_WIDTH *\n                        (this.maxScoreUnits + 1));\n                },\n\n                /**\n                 * Draw a digit to canvas.\n                 * @param {number} digitPos Position of the digit.\n                 * @param {number} value Digit value 0-9.\n                 * @param {boolean} opt_highScore Whether drawing the high score.\n                 */\n                draw: function (digitPos, value, opt_highScore) {\n                    var sourceWidth = DistanceMeter.dimensions.WIDTH;\n                    var sourceHeight = DistanceMeter.dimensions.HEIGHT;\n                    var sourceX = DistanceMeter.dimensions.WIDTH * value;\n                    var sourceY = 0;\n\n                    var targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\n                    var targetY = this.y;\n                    var targetWidth = DistanceMeter.dimensions.WIDTH;\n                    var targetHeight = DistanceMeter.dimensions.HEIGHT;\n\n                    // For high DPI we 2x source values.\n                    if (IS_HIDPI) {\n                        sourceWidth *= 2;\n                        sourceHeight *= 2;\n                        sourceX *= 2;\n                    }\n\n                    sourceX += this.spritePos.x;\n                    sourceY += this.spritePos.y;\n\n                    this.canvasCtx.save();\n\n                    if (opt_highScore) {\n                        // Left of the current score.\n                        var highScoreX = this.x - (this.maxScoreUnits * 2) *\n                            DistanceMeter.dimensions.WIDTH;\n                        this.canvasCtx.translate(highScoreX, this.y);\n                    } else {\n                        this.canvasCtx.translate(this.x, this.y);\n                    }\n\n                    this.canvasCtx.drawImage(this.image, sourceX, sourceY,\n                        sourceWidth, sourceHeight,\n                        targetX, targetY,\n                        targetWidth, targetHeight\n                    );\n\n                    this.canvasCtx.restore();\n                },\n\n                /**\n                 * Covert pixel distance to a "real" distance.\n                 * @param {number} distance Pixel distance ran.\n                 * @return {number} The "real" distance ran.\n                 */\n                getActualDistance: function (distance) {\n                    return distance ? Math.round(distance * this.config.COEFFICIENT) : 0;\n                },\n\n                /**\n                 * Update the distance meter.\n                 * @param {number} distance\n                 * @param {number} deltaTime\n                 * @return {boolean} Whether the acheivement sound fx should be played.\n                 */\n                update: function (deltaTime, distance) {\n                    var paint = true;\n                    var playSound = false;\n\n                    if (!this.acheivement) {\n                        distance = this.getActualDistance(distance);\n                        // Score has gone beyond the initial digit count.\n                        if (distance > this.maxScore && this.maxScoreUnits ==\n                            this.config.MAX_DISTANCE_UNITS) {\n                            this.maxScoreUnits++;\n                            this.maxScore = parseInt(this.maxScore + "9");\n                        } else {\n                            this.distance = 0;\n                        }\n\n                        if (distance > 0) {\n                            // Acheivement unlocked\n                            if (distance % this.config.ACHIEVEMENT_DISTANCE == 0) {\n                                // Flash score and play sound.\n                                this.acheivement = true;\n                                this.flashTimer = 0;\n                                playSound = true;\n                            }\n\n                            // Create a string representation of the distance with leading 0.\n                            var distanceStr = (this.defaultString +\n                                distance).substr(-this.maxScoreUnits);\n                            this.digits = distanceStr.split("");\n                        } else {\n                            this.digits = this.defaultString.split("");\n                        }\n                    } else {\n                        // Control flashing of the score on reaching acheivement.\n                        if (this.flashIterations <= this.config.FLASH_ITERATIONS) {\n                            this.flashTimer += deltaTime;\n\n                            if (this.flashTimer < this.config.FLASH_DURATION) {\n                                paint = false;\n                            } else if (this.flashTimer >\n                                this.config.FLASH_DURATION * 2) {\n                                this.flashTimer = 0;\n                                this.flashIterations++;\n                            }\n                        } else {\n                            this.acheivement = false;\n                            this.flashIterations = 0;\n                            this.flashTimer = 0;\n                        }\n                    }\n\n                    // Draw the digits if not flashing.\n                    if (paint) {\n                        for (var i = this.digits.length - 1; i >= 0; i--) {\n                            this.draw(i, parseInt(this.digits[i]));\n                        }\n                    }\n\n                    this.drawHighScore();\n                    return playSound;\n                },\n\n                /**\n                 * Draw the high score.\n                 */\n                drawHighScore: function () {\n                    this.canvasCtx.save();\n                    this.canvasCtx.globalAlpha = .8;\n                    for (var i = this.highScore.length - 1; i >= 0; i--) {\n                        this.draw(i, parseInt(this.highScore[i], 10), true);\n                    }\n                    this.canvasCtx.restore();\n                },\n\n                /**\n                 * Set the highscore as a array string.\n                 * Position of char in the sprite: H - 10, I - 11.\n                 * @param {number} distance Distance ran in pixels.\n                 */\n                setHighScore: function (distance) {\n                    distance = this.getActualDistance(distance);\n                    var highScoreStr = (this.defaultString +\n                        distance).substr(-this.maxScoreUnits);\n\n                    this.highScore = ["10", "11", ""].concat(highScoreStr.split(""));\n                },\n\n                /**\n                 * Reset the distance meter back to "00000".\n                 */\n                reset: function () {\n                    this.update(0);\n                    this.acheivement = false;\n                }\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Cloud background item.\n             * Similar to an obstacle object but without collision boxes.\n             * @param {HTMLCanvasElement} canvas Canvas element.\n             * @param {Object} spritePos Position of image in sprite.\n             * @param {number} containerWidth\n             */\n            function Cloud(canvas, spritePos, containerWidth) {\n                this.canvas = canvas;\n                this.canvasCtx = this.canvas.getContext("2d");\n                this.spritePos = spritePos;\n                this.containerWidth = containerWidth;\n                this.xPos = containerWidth;\n                this.yPos = 0;\n                this.remove = false;\n                this.cloudGap = getRandomNum(Cloud.config.MIN_CLOUD_GAP,\n                    Cloud.config.MAX_CLOUD_GAP);\n\n                this.init();\n            };\n\n\n            /**\n             * Cloud object config.\n             * @enum {number}\n             */\n            Cloud.config = {\n                HEIGHT: 14,\n                MAX_CLOUD_GAP: 400,\n                MAX_SKY_LEVEL: 30,\n                MIN_CLOUD_GAP: 100,\n                MIN_SKY_LEVEL: 71,\n                WIDTH: 46\n            };\n\n\n            Cloud.prototype = {\n                /**\n                 * Initialise the cloud. Sets the Cloud height.\n                 */\n                init: function () {\n                    this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL,\n                        Cloud.config.MIN_SKY_LEVEL);\n                    this.draw();\n                },\n\n                /**\n                 * Draw the cloud.\n                 */\n                draw: function () {\n                    this.canvasCtx.save();\n                    var sourceWidth = Cloud.config.WIDTH;\n                    var sourceHeight = Cloud.config.HEIGHT;\n\n                    if (IS_HIDPI) {\n                        sourceWidth = sourceWidth * 2;\n                        sourceHeight = sourceHeight * 2;\n                    }\n\n                    this.canvasCtx.drawImage(Runner.imageSprite, this.spritePos.x,\n                        this.spritePos.y,\n                        sourceWidth, sourceHeight,\n                        this.xPos, this.yPos,\n                        Cloud.config.WIDTH, Cloud.config.HEIGHT);\n\n                    this.canvasCtx.restore();\n                },\n\n                /**\n                 * Update the cloud position.\n                 * @param {number} speed\n                 */\n                update: function (speed) {\n                    if (!this.remove) {\n                        this.xPos -= Math.ceil(speed);\n                        this.draw();\n\n                        // Mark as removeable if no longer in the canvas.\n                        if (!this.isVisible()) {\n                            this.remove = true;\n                        }\n                    }\n                },\n\n                /**\n                 * Check if the cloud is visible on the stage.\n                 * @return {boolean}\n                 */\n                isVisible: function () {\n                    return this.xPos + Cloud.config.WIDTH > 0;\n                }\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Nightmode shows a moon and stars on the horizon.\n             */\n            function NightMode(canvas, spritePos, containerWidth) {\n                this.spritePos = spritePos;\n                this.canvas = canvas;\n                this.canvasCtx = canvas.getContext("2d");\n                this.xPos = containerWidth - 50;\n                this.yPos = 30;\n                this.currentPhase = 0;\n                this.opacity = 0;\n                this.containerWidth = containerWidth;\n                this.stars = [];\n                this.drawStars = false;\n                this.placeStars();\n            };\n\n            /**\n             * @enum {number}\n             */\n            NightMode.config = {\n                FADE_SPEED: 0.035,\n                HEIGHT: 40,\n                MOON_SPEED: 0.25,\n                NUM_STARS: 2,\n                STAR_SIZE: 9,\n                STAR_SPEED: 0.3,\n                STAR_MAX_Y: 70,\n                WIDTH: 20\n            };\n\n            NightMode.phases = [140, 120, 100, 60, 40, 20, 0];\n\n            NightMode.prototype = {\n                /**\n                 * Update moving moon, changing phases.\n                 * @param {boolean} activated Whether night mode is activated.\n                 * @param {number} delta\n                 */\n                update: function (activated, delta) {\n                    // Moon phase.\n                    if (activated && this.opacity == 0) {\n                        this.currentPhase++;\n\n                        if (this.currentPhase >= NightMode.phases.length) {\n                            this.currentPhase = 0;\n                        }\n                    }\n\n                    // Fade in / out.\n                    if (activated && (this.opacity < 1 || this.opacity == 0)) {\n                        this.opacity += NightMode.config.FADE_SPEED;\n                    } else if (this.opacity > 0) {\n                        this.opacity -= NightMode.config.FADE_SPEED;\n                    }\n\n                    // Set moon positioning.\n                    if (this.opacity > 0) {\n                        this.xPos = this.updateXPos(this.xPos, NightMode.config.MOON_SPEED);\n\n                        // Update stars.\n                        if (this.drawStars) {\n                            for (var i = 0; i < NightMode.config.NUM_STARS; i++) {\n                                this.stars[i].x = this.updateXPos(this.stars[i].x,\n                                    NightMode.config.STAR_SPEED);\n                            }\n                        }\n                        this.draw();\n                    } else {\n                        this.opacity = 0;\n                        this.placeStars();\n                    }\n                    this.drawStars = true;\n                },\n\n                updateXPos: function (currentPos, speed) {\n                    if (currentPos < -NightMode.config.WIDTH) {\n                        currentPos = this.containerWidth;\n                    } else {\n                        currentPos -= speed;\n                    }\n                    return currentPos;\n                },\n\n                draw: function () {\n                    var moonSourceWidth = this.currentPhase == 3 ? NightMode.config.WIDTH * 2 :\n                        NightMode.config.WIDTH;\n                    var moonSourceHeight = NightMode.config.HEIGHT;\n                    var moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase];\n                    var moonOutputWidth = moonSourceWidth;\n                    var starSize = NightMode.config.STAR_SIZE;\n                    var starSourceX = Runner.spriteDefinition.LDPI.STAR.x;\n\n                    if (IS_HIDPI) {\n                        moonSourceWidth *= 2;\n                        moonSourceHeight *= 2;\n                        moonSourceX = this.spritePos.x +\n                            (NightMode.phases[this.currentPhase] * 2);\n                        starSize *= 2;\n                        starSourceX = Runner.spriteDefinition.HDPI.STAR.x;\n                    }\n\n                    this.canvasCtx.save();\n                    this.canvasCtx.globalAlpha = this.opacity;\n\n                    // Stars.\n                    if (this.drawStars) {\n                        for (var i = 0; i < NightMode.config.NUM_STARS; i++) {\n                            this.canvasCtx.drawImage(Runner.imageSprite,\n                                starSourceX, this.stars[i].sourceY, starSize, starSize,\n                                Math.round(this.stars[i].x), this.stars[i].y,\n                                NightMode.config.STAR_SIZE, NightMode.config.STAR_SIZE);\n                        }\n                    }\n\n                    // Moon.\n                    this.canvasCtx.drawImage(Runner.imageSprite, moonSourceX,\n                        this.spritePos.y, moonSourceWidth, moonSourceHeight,\n                        Math.round(this.xPos), this.yPos,\n                        moonOutputWidth, NightMode.config.HEIGHT);\n\n                    this.canvasCtx.globalAlpha = 1;\n                    this.canvasCtx.restore();\n                },\n\n                // Do star placement.\n                placeStars: function () {\n                    var segmentSize = Math.round(this.containerWidth /\n                        NightMode.config.NUM_STARS);\n\n                    for (var i = 0; i < NightMode.config.NUM_STARS; i++) {\n                        this.stars[i] = {};\n                        this.stars[i].x = getRandomNum(segmentSize * i, segmentSize * (i + 1));\n                        this.stars[i].y = getRandomNum(0, NightMode.config.STAR_MAX_Y);\n\n                        if (IS_HIDPI) {\n                            this.stars[i].sourceY = Runner.spriteDefinition.HDPI.STAR.y +\n                                NightMode.config.STAR_SIZE * 2 * i;\n                        } else {\n                            this.stars[i].sourceY = Runner.spriteDefinition.LDPI.STAR.y +\n                                NightMode.config.STAR_SIZE * i;\n                        }\n                    }\n                },\n\n                reset: function () {\n                    this.currentPhase = 0;\n                    this.opacity = 0;\n                    this.update(false);\n                }\n\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Horizon Line.\n             * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\n             * @param {HTMLCanvasElement} canvas\n             * @param {Object} spritePos Horizon position in sprite.\n             * @constructor\n             */\n            function HorizonLine(canvas, spritePos) {\n                this.spritePos = spritePos;\n                this.canvas = canvas;\n                this.canvasCtx = canvas.getContext("2d");\n                this.sourceDimensions = {};\n                this.dimensions = HorizonLine.dimensions;\n                this.sourceXPos = [this.spritePos.x, this.spritePos.x +\n                    this.dimensions.WIDTH];\n                this.xPos = [];\n                this.yPos = 0;\n                this.bumpThreshold = 0.5;\n\n                this.setSourceDimensions();\n                this.draw();\n            };\n\n\n            /**\n             * Horizon line dimensions.\n             * @enum {number}\n             */\n            HorizonLine.dimensions = {\n                WIDTH: 600,\n                HEIGHT: 12,\n                YPOS: 127\n            };\n\n\n            HorizonLine.prototype = {\n                /**\n                 * Set the source dimensions of the horizon line.\n                 */\n                setSourceDimensions: function () {\n\n                    for (var dimension in HorizonLine.dimensions) {\n                        if (IS_HIDPI) {\n                            if (dimension != "YPOS") {\n                                this.sourceDimensions[dimension] =\n                                    HorizonLine.dimensions[dimension] * 2;\n                            }\n                        } else {\n                            this.sourceDimensions[dimension] =\n                                HorizonLine.dimensions[dimension];\n                        }\n                        this.dimensions[dimension] = HorizonLine.dimensions[dimension];\n                    }\n\n                    this.xPos = [0, HorizonLine.dimensions.WIDTH];\n                    this.yPos = HorizonLine.dimensions.YPOS;\n                },\n\n                /**\n                 * Return the crop x position of a type.\n                 */\n                getRandomType: function () {\n                    return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\n                },\n\n                /**\n                 * Draw the horizon line.\n                 */\n                draw: function () {\n                    this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[0],\n                        this.spritePos.y,\n                        this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\n                        this.xPos[0], this.yPos,\n                        this.dimensions.WIDTH, this.dimensions.HEIGHT);\n\n                    this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[1],\n                        this.spritePos.y,\n                        this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\n                        this.xPos[1], this.yPos,\n                        this.dimensions.WIDTH, this.dimensions.HEIGHT);\n                },\n\n                /**\n                 * Update the x position of an indivdual piece of the line.\n                 * @param {number} pos Line position.\n                 * @param {number} increment\n                 */\n                updateXPos: function (pos, increment) {\n                    var line1 = pos;\n                    var line2 = pos == 0 ? 1 : 0;\n\n                    this.xPos[line1] -= increment;\n                    this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\n\n                    if (this.xPos[line1] <= -this.dimensions.WIDTH) {\n                        this.xPos[line1] += this.dimensions.WIDTH * 2;\n                        this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\n                        this.sourceXPos[line1] = this.getRandomType() + this.spritePos.x;\n                    }\n                },\n\n                /**\n                 * Update the horizon line.\n                 * @param {number} deltaTime\n                 * @param {number} speed\n                 */\n                update: function (deltaTime, speed) {\n                    var increment = Math.floor(speed * (FPS / 1000) * deltaTime);\n\n                    if (this.xPos[0] <= 0) {\n                        this.updateXPos(0, increment);\n                    } else {\n                        this.updateXPos(1, increment);\n                    }\n                    this.draw();\n                },\n\n                /**\n                 * Reset horizon to the starting position.\n                 */\n                reset: function () {\n                    this.xPos[0] = 0;\n                    this.xPos[1] = HorizonLine.dimensions.WIDTH;\n                }\n            };\n\n\n            //******************************************************************************\n\n            /**\n             * Horizon background class.\n             * @param {HTMLCanvasElement} canvas\n             * @param {Object} spritePos Sprite positioning.\n             * @param {Object} dimensions Canvas dimensions.\n             * @param {number} gapCoefficient\n             * @constructor\n             */\n            function Horizon(canvas, spritePos, dimensions, gapCoefficient) {\n                this.canvas = canvas;\n                this.canvasCtx = this.canvas.getContext("2d");\n                this.config = Horizon.config;\n                this.dimensions = dimensions;\n                this.gapCoefficient = gapCoefficient;\n                this.obstacles = [];\n                this.obstacleHistory = [];\n                this.horizonOffsets = [0, 0];\n                this.cloudFrequency = this.config.CLOUD_FREQUENCY;\n                this.spritePos = spritePos;\n                this.nightMode = null;\n\n                // Cloud\n                this.clouds = [];\n                this.cloudSpeed = this.config.BG_CLOUD_SPEED;\n\n                // Horizon\n                this.horizonLine = null;\n                this.init();\n            };\n\n\n            /**\n             * Horizon config.\n             * @enum {number}\n             */\n            Horizon.config = {\n                BG_CLOUD_SPEED: 0.2,\n                BUMPY_THRESHOLD: .3,\n                CLOUD_FREQUENCY: .5,\n                HORIZON_HEIGHT: 16,\n                MAX_CLOUDS: 6\n            };\n\n\n            Horizon.prototype = {\n                /**\n                 * Initialise the horizon. Just add the line and a cloud. No obstacles.\n                 */\n                init: function () {\n                    this.addCloud();\n                    this.horizonLine = new HorizonLine(this.canvas, this.spritePos.HORIZON);\n                    this.nightMode = new NightMode(this.canvas, this.spritePos.MOON,\n                        this.dimensions.WIDTH);\n                },\n\n                /**\n                 * @param {number} deltaTime\n                 * @param {number} currentSpeed\n                 * @param {boolean} updateObstacles Used as an override to prevent\n                 *     the obstacles from being updated / added. This happens in the\n                 *     ease in section.\n                 * @param {boolean} showNightMode Night mode activated.\n                 */\n                update: function (deltaTime, currentSpeed, updateObstacles, showNightMode) {\n                    this.runningTime += deltaTime;\n                    this.horizonLine.update(deltaTime, currentSpeed);\n                    this.nightMode.update(showNightMode);\n                    this.updateClouds(deltaTime, currentSpeed);\n\n                    if (updateObstacles) {\n                        this.updateObstacles(deltaTime, currentSpeed);\n                    }\n                },\n\n                /**\n                 * Update the cloud positions.\n                 * @param {number} deltaTime\n                 * @param {number} currentSpeed\n                 */\n                updateClouds: function (deltaTime, speed) {\n                    var cloudSpeed = this.cloudSpeed / 1000 * deltaTime * speed;\n                    var numClouds = this.clouds.length;\n\n                    if (numClouds) {\n                        for (var i = numClouds - 1; i >= 0; i--) {\n                            this.clouds[i].update(cloudSpeed);\n                        }\n\n                        var lastCloud = this.clouds[numClouds - 1];\n\n                        // Check for adding a new cloud.\n                        if (numClouds < this.config.MAX_CLOUDS &&\n                            (this.dimensions.WIDTH - lastCloud.xPos) > lastCloud.cloudGap &&\n                            this.cloudFrequency > Math.random()) {\n                            this.addCloud();\n                        }\n\n                        // Remove expired clouds.\n                        this.clouds = this.clouds.filter(function (obj) {\n                            return !obj.remove;\n                        });\n                    } else {\n                        this.addCloud();\n                    }\n                },\n\n                /**\n                 * Update the obstacle positions.\n                 * @param {number} deltaTime\n                 * @param {number} currentSpeed\n                 */\n                updateObstacles: function (deltaTime, currentSpeed) {\n                    // Obstacles, move to Horizon layer.\n                    var updatedObstacles = this.obstacles.slice(0);\n\n                    for (var i = 0; i < this.obstacles.length; i++) {\n                        var obstacle = this.obstacles[i];\n                        obstacle.update(deltaTime, currentSpeed);\n\n                        // Clean up existing obstacles.\n                        if (obstacle.remove) {\n                            updatedObstacles.shift();\n                        }\n                    }\n                    this.obstacles = updatedObstacles;\n\n                    if (this.obstacles.length > 0) {\n                        var lastObstacle = this.obstacles[this.obstacles.length - 1];\n\n                        if (lastObstacle && !lastObstacle.followingObstacleCreated &&\n                            lastObstacle.isVisible() &&\n                            (lastObstacle.xPos + lastObstacle.width + lastObstacle.gap) <\n                            this.dimensions.WIDTH) {\n                            this.addNewObstacle(currentSpeed);\n                            lastObstacle.followingObstacleCreated = true;\n                        }\n                    } else {\n                        // Create new obstacles.\n                        this.addNewObstacle(currentSpeed);\n                    }\n                },\n\n                removeFirstObstacle: function () {\n                    this.obstacles.shift();\n                },\n\n                /**\n                 * Add a new obstacle.\n                 * @param {number} currentSpeed\n                 */\n                addNewObstacle: function (currentSpeed) {\n                    var obstacleTypeIndex = getRandomNum(0, Obstacle.types.length - 1);\n                    var obstacleType = Obstacle.types[obstacleTypeIndex];\n\n                    // Check for multiples of the same type of obstacle.\n                    // Also check obstacle is available at current speed.\n                    if (this.duplicateObstacleCheck(obstacleType.type) ||\n                        currentSpeed < obstacleType.minSpeed) {\n                        this.addNewObstacle(currentSpeed);\n                    } else {\n                        var obstacleSpritePos = this.spritePos[obstacleType.type];\n\n                        this.obstacles.push(new Obstacle(this.canvasCtx, obstacleType,\n                            obstacleSpritePos, this.dimensions,\n                            this.gapCoefficient, currentSpeed, obstacleType.width));\n\n                        this.obstacleHistory.unshift(obstacleType.type);\n\n                        if (this.obstacleHistory.length > 1) {\n                            this.obstacleHistory.splice(Runner.config.MAX_OBSTACLE_DUPLICATION);\n                        }\n                    }\n                },\n\n                /**\n                 * Returns whether the previous two obstacles are the same as the next one.\n                 * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\n                 * @return {boolean}\n                 */\n                duplicateObstacleCheck: function (nextObstacleType) {\n                    var duplicateCount = 0;\n\n                    for (var i = 0; i < this.obstacleHistory.length; i++) {\n                        duplicateCount = this.obstacleHistory[i] == nextObstacleType ?\n                            duplicateCount + 1 : 0;\n                    }\n                    return duplicateCount >= Runner.config.MAX_OBSTACLE_DUPLICATION;\n                },\n\n                /**\n                 * Reset the horizon layer.\n                 * Remove existing obstacles and reposition the horizon line.\n                 */\n                reset: function () {\n                    this.obstacles = [];\n                    this.horizonLine.reset();\n                    this.nightMode.reset();\n                },\n\n                /**\n                 * Update the canvas width and scaling.\n                 * @param {number} width Canvas width.\n                 * @param {number} height Canvas height.\n                 */\n                resize: function (width, height) {\n                    this.canvas.width = width;\n                    this.canvas.height = height;\n                },\n\n                /**\n                 * Add a new cloud to the horizon.\n                 */\n                addCloud: function () {\n                    this.clouds.push(new Cloud(this.canvas, this.spritePos.CLOUD,\n                        this.dimensions.WIDTH));\n                }\n            };\n        })();\n\n\n        function onDocumentLoad() {\n            new Runner(".interstitial-wrapper");\n        }\n\n        document.addEventListener("DOMContentLoaded", onDocumentLoad);\n    <\/script>\n</head>\n\n<body id="t" class="offline">\n    <div id="main-frame-error" class="interstitial-wrapper">\n        <div id="main-content">\n            <div class="icon icon-offline" alt=""></div>\n            <h1>No internet</h1>\n            <p>Try:\n            <ul>\n                <li>Checking the internet connection</li>\n                <li>Checking the address</li>\n            </ul>\n            </p>\n            <p class="text-muted">ERR_INTERNET_DISCONNECTED</p>\n        </div>\n        <div id="offline-resources">\n            <img id="offline-resources-1x" src="').concat(D.a,'">\n            <img id="offline-resources-2x" src="').concat(Q.a,'">\n            <template id="audio-resources">\n                <audio id="offline-sound-press"\n                    src="data:audio/mpeg;base64,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"></audio>\n                <audio id="offline-sound-hit"\n                    src="data:audio/mpeg;base64,"></audio>\n                <audio id="offline-sound-reached"\n                    src="data:audio/mpeg;base64,"></audio>\n            </template>\n        </div>\n    </div>\n</body>\n\n</html>'),w={props:{tabData:Object,index:Number},data:function(){var n=this.$store.state.assets.misc;return{logo:Object(r["a"])(n,"google"),mic:Object(r["a"])(n,"google-mic"),tab:this.tabData,ErrorPage:V}},computed:{id:function(){return"tab"+this.index}},watch:{tabData:function(n){this.tab=n},"tab.historyIndex":function(n){var A=this.tab.history;A.length&&(n>0&&(this.tab.activeBack=!0),0===n&&(this.tab.activeBack=!1),n<A.length-1&&(this.tab.activeNext=!0),n>=A.length-1&&(this.tab.activeNext=!1),this.updateTab())}},mounted:function(){this.focusAddress(),window.addEventListener("message",this.handlePageLoad)},destroyed:function(){window.removeEventListener("message",this.handlePageLoad)},methods:{updateTab:function(){this.$emit("update",{index:this.index,data:this.tab})},load:function(n){var A=n.target,e=(A.value||"").toLowerCase(),t="google.com";if(e&&e!==this.tab.url){var i=Object(r["d"])(e);Object(r["h"])(i)?this.tab.url=e===t?Object(r["d"])(t+"?igu=1"):i:this.tab.url=Object(r["d"])(t+"/search?q="+e.replace(/ /g,"+")),this.tab.error=!1,this.tab.isLoading=!0,this.pushHistory()}},loadHome:function(){this.tab.url&&(this.tab.url="",this.tab.title="",this.tab.isLoading=!1,this.pushHistory())},navigate:function(n){var A=this.tab,e=A.history,t=A.historyIndex;if("back"===n&&t>0)this.tab.url=e[--this.tab.historyIndex];else{if(!("next"===n&&t<e.length-1))return;this.tab.url=e[++this.tab.historyIndex]}this.tab.isLoading=""!==this.tab.url,this.tab.title=""===this.tab.url?"":this.tab.title,this.tab.error=!1,this.updateTab()},pushHistory:function(){this.tab.historyIndex++,this.tab.history=this.tab.history.slice(0,this.tab.historyIndex),this.tab.history.push(this.tab.url),this.updateTab()},reload:function(){var n=this.$el.querySelector("iframe");n&&n.contentWindow.location.reload()},handlePageLoad:function(n){var A=n.data,e=A.frameIndex;if(![null,void 0].includes(e)&&+e===this.index){var t=A.event,i=A.message,s=this.tab;switch(t){case"loadError":s.title=new URL(s.url).hostname,s.error=!0,s.isLoading=!1;break;case"pageLoaded":s.title=i,s.isLoading=!1;break;case"urlChanged":s.url=i,s.isLoading=!0,this.pushHistory();break}this.tab=s,this.updateTab()}},focusAddress:function(){this.$refs.Address.select()}},components:{Navigation:T["a"],RingSpinner:E,AddressBar:x["a"]}},y=w,H=Object(f["a"])(y,u,m,!1,null,null,null),U=H.exports,k={data:function(){var n=this.$store.state,A=n.theme,e=n.themes,t={title:"",url:"",isLoading:!1,isActive:!0,isOpen:!0,error:!1,activeBack:!1,activeNext:!1,history:[],historyIndex:-1};return{icon:e[A].icon.chrome,tabs:[Object(s["a"])({},t)],newTab:t}},watch:{tabs:function(){var n=this;this.$nextTick().then(this.renderTabs).then((function(){var A=n.$el,e=n.tabs,t=e.filter((function(n){return n.isOpen}));t.length<3||A.querySelectorAll(".tab").forEach((function(n){n.style.width=100/(t.length+1)+"%",A.querySelector(".tabs").scrollLeft=n.offsetLeft}))}))}},mounted:function(){this.renderTabs()},methods:{renderTabs:function(){Object(h["a"])(this.$refs.tabs,{anchor:!1,closable:!0,addTab:this.addTab,onActive:this.activateTab,onClose:this.closeTab})},addTab:function(){var n=this;this.tabs.push(Object(s["a"])({},this.newTab)),this.$nextTick().then((function(){var A=n.tabs.length;n.activateTab(A-1),[2,10].includes(A)&&Object(o["q"])(),A>15&&n.$root.$emit(a["f"].ChangeView,a["h"].Bsod,"LEAKED_MEMORY")}))},activateTab:function(n){var A=this,e="number"===typeof n?n:n.split("tab")[1];this.tabs.forEach((function(n,e){return A.tabs[e].isActive=!1})),this.tabs[e].isActive=!0},updateTab:function(n){var A=n.index,e=n.data;this.tabs.splice(A,1,e)},closeTab:function(n){var A=function(n){return n.isOpen},e=this.tabs.filter(A);if(1!==e.length){var t=+n.split("tab")[1],i=this.tabs[t];if(i.isActive){var s=Object(r["b"])(this.tabs,A),o=this.tabs.slice();o.splice(s,1);var h=t===s?Object(r["b"])(o,A):Object(r["c"])(this.tabs,A,t+1);this.activateTab(h)}i.isOpen=!1,this.updateTab({index:t,data:i})}else this.$root.$emit(a["f"].CloseWindow,"chrome")}},components:{Controls:c["a"],TitleBar:d["a"],Window:l["a"],ChromeTab:U}},O=k,P=(e("0cb8"),Object(f["a"])(O,t,i,!1,null,"3720977e",null));A["default"]=P.exports}}]);